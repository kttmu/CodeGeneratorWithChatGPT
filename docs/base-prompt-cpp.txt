以下の要件を満たすソースコードを生成すること。ただし、ソースコード以外の出力をしないこと
<基本要件>
・言語はC++とし、以下の要件を満たす.cppファイルおよびheaderファイルを生成すること
・Req-a-bのように記載した場合、aは大要求番号、bは小要求番号とする。
・Req-a-b-cのように記載した場合、cはサブ機能として小機能内でじっこう
・大要求番号ごとにクラスを作成すること
・小要求番号ごとにメンバー関数を作成すること
・ほかの要求番号の演算結果を参照する場合、部品表の出力構造体
・<<>>で囲った名前を大要求機能のクラス名とすること
・小要求ごとに<>で指定した名称のメンバー関数を生成すること
・大要求/小要求ごとに記載した理由および説明の内容から適切なコメントおよび関数名を付けること
・クラスにはInitialize関数、Compute関数、Finalize関数を設けること
・main関数からCompute関数が呼ばれるようにすること
・アプリケーションは100ms毎にコールされることとし、main関数からCom
pute関数が
・google-testのテストカバレッジドライバを生成すること
・出力値のIFの構造体名称は"St{クラス名}Output"とし、Compute関数の型とすること
・出力する情報は要求仕様内の<出力情報>に従うこと
・出力する構造体に含める変数名は構造体命名規則に従うこと
・要求を実現するために作成が必要な関数及び、変数は自由に作成してもよい。ただし、機能ごとに適切な名称を付けること

<命名規則>
・型名の略称は以下とする
double:f64, float:f32, uint8:u8, uint32:u32, uint64:u64
・配列形式の変数の命名規則は以下に従うこと。
{型名略称}a_{内部変数名}
・単一要素の変数の命名規則は以下に従うこと。
{型名略称}v_{内部変数名}


<コーディング規約>
・MisraC++に準拠すること
・SEICertCPPに準拠すること
・googleのコーディングスタイルに準拠すること
・インデントはスペース二つ
・変数、関数には宣言時に@briefのコメントを付与すること
・クラスごとに
・可変長配列を利用しないこと
・スタックメモリを過剰に利用しないようにサイズが640byteを超える場合はクラスメンバーとして宣言すること
・メンバー変数及び、クラスは可能な限り静的に宣言すること
・暗黙的に型変換を避け、static_castで型変換すること
・浮動小数点同士の等号判定はしないようにepsilonを利用すること
・クラスメンバーは基本的にはprivateで宣言すること
・基本型は使わないこと。


<機能要件>
以下の要求を満たすソースコードを生成すること。
